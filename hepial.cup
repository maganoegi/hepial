
import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.*;



action code {:
    
:}

terminal PRG, STARTPRG, ENDPRG, CONSTANT, SEMICOLON, STARTFUNC, ENDFUNC, OPENPARENT;
terminal CLOSEPARENT, COMMA, EQUAL, DOUBLEPOINTS, OPENBRACK, CLOSEBRACK;
terminal READ, WRITE, RETURN, IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE;
terminal FOR, FROM, TO, ENDFOR, TRUE, FALSE,  PLUS, MINUS, TIMES, DIVIDE;
terminal EQUALS, DIFF, INF, INFEQUAL, SUP, SUPEQUAL, AND, OR, TILDA, NOT;

terminal String IDENT, STRINGCONST, TINTEGER, TBOOLEAN;
terminal int INTEGERCONST;

// Non terminal rules that return a RESULT value
non terminal ProgramDeclaration program, header;
non terminal Block declar_lst, body;
non terminal ArrayList<Instruction> instr_lst, declars, declar, declar_var;
non terminal ConstantDeclaration declar_const; 
non terminal Expression expr, access, operand;
non terminal For for_instr;                              
non terminal While while_instr;                          
// non terminal return_instr;
non terminal Condition cond_instr;                       
non terminal Write write_instr;                           
non terminal Read read_instr;                            
non terminal Instruction instr;                           
non terminal Affectation assign;
// non terminal index;
non terminal Unary op_una;                               
non terminal Binary op_bin;

non terminal ArrayList<Idf> l_ident;
non terminal Type type;                                   
non terminal Type typebase;                               

// Precedences
precedence left PLUS, MINUS, TIMES, DIVIDE, EQUALS, DIFF;
precedence left INF, SUP, INFEQUAL, SUPEQUAL, AND, OR, DOUBLEPOINTS;
precedence right TILDA, NOT;

program           ::= header:p declar_lst:declar STARTPRG body:instructions ENDPRG
                    {:  p.setInstructions(instructions);
                        p.setDeclarations(declar);
                        System.out.println("ok, c'est good !!!!"); 
                        RESULT = p;
                    :};

header            ::= PRG IDENT:id {: RESULT = new ProgramDeclaration(new Idf(id, "", idleft, idright), "", idleft, idright); :};

declar_lst        ::=  declars:inst {: RESULT = new Block(inst, "", instleft, instright); :}; // bloc d'inst

declars           ::= {: RESULT = new ArrayList<Instruction>(); :}
                      | declars:dcs declar:dc {: ArrayList<Instruction> lst = new ArrayList<>(dcs); lst.addAll(dc); RESULT = lst; :};

declar            ::= declar_var:v {: RESULT = v; :}
                      | declar_const:dc {: ArrayList<Instruction> lst = new ArrayList<>(); lst.add(dc); RESULT = lst; :}; 

declar_var        ::= type:t l_ident:ids SEMICOLON
                      {: 
                        ArrayList<Instruction> lst = new ArrayList<>();
                        for(Idf id : ids) {
                          lst.add(new VariableDeclaration(t, id, "", idsleft, idsright));
                          TDS.put(id.getNom(), t);
                        }
                        RESULT = lst;
                      :};

l_ident           ::= IDENT:id {: ArrayList<Idf> lst = new ArrayList<>(); lst.add(new Idf(id, "", idleft, idright)); RESULT = lst; :}
                      | l_ident:ids COMMA IDENT:id 
                        {: 
                          ArrayList<Idf> lst = new ArrayList<>(ids); lst.add(new Idf(id, "", idleft, idright)); RESULT = lst;
                       :};

type              ::= typebase:t {: RESULT = t; :};

typebase          ::= TINTEGER {: RESULT = new Int(); :}
                      | TBOOLEAN {: RESULT = new Bool(); :};

declar_const      ::= CONSTANT:c type:t IDENT:id EQUAL expr:e SEMICOLON
                      {:
                        RESULT = new ConstantDeclaration(t, new Idf(id, "", idleft, idright), e, "", tleft, tright);
                      :};

expr              ::= expr:left op_bin:op expr:right
                      {:
                       // build binary expression
                         op.lierGauche(left);
                         op.lierDroit(right);
                         RESULT = op;  
                      :}
                      | op_una:op expr:expr {: op.lier(expr); RESULT = op; :}
                      | OPENPARENT expr:e CLOSEPARENT {: RESULT = new Parentheses(e, "", eleft, eright); :}
                      | operand:operand             {:  RESULT = operand;  :};

op_bin            ::= PLUS:o       {: RESULT = new Addition("", oleft, oright); :}
                      | TIMES:o  {: RESULT = new Product("", oleft, oright); :}
                      | DIVIDE:o {: RESULT = new Division("", oleft, oright); :}
                      | EQUALS:o {: RESULT = new Equals("", oleft, oright); :} 
                      | DIFF:o   {: RESULT = new Difference("", oleft, oright); :}
                      | INF:o    {: RESULT = new Inferior("", oleft, oright); :}
                      | SUP:o    {: RESULT = new Superior("", oleft, oright); :}
                      | INFEQUAL:o {: RESULT = new InferiorEqual("", oleft, oright); :}
                      | SUPEQUAL:o {: RESULT = new SuperiorEqual("", oleft, oright); :}
                      | AND:o    {: RESULT = new And("", oleft, oright); :}
                      | OR:o     {: RESULT = new Or("", oleft, oright); :};

op_una            ::= TILDA:o      {: RESULT = new Tilda("", oleft, oright); :}
                      | NOT:o      {: RESULT = new Not("", oleft, oright);  :}
                      | MINUS:o    {: RESULT = new Minus("", oleft, oright);  :};

operand           ::= access:access       {: RESULT = access; :}
                      | INTEGERCONST:ib   {: RESULT = new Number(ib, "", ibleft, ibright); :}
                      | TRUE:o            {: RESULT = new True("", oleft, oright); :}
                      | FALSE:o           {: RESULT = new False("", oleft, oright); :};

access            ::= IDENT:id   {: RESULT = new Idf(id, "", idleft, idright); :};

body              ::= instr_lst:instructions {: RESULT = new Block(instructions, "", instructionsleft, instructionsright); :};

instr_lst         ::= {: RESULT = new ArrayList(); :}
                      | instr_lst:instructionList instr:instruction
                      {:
                        ArrayList<Instruction> instructions = new ArrayList<Instruction>(instructionList);
                        instructions.add(instruction);
                        RESULT = instructions;
                      :};

instr             ::= assign:inst        {: RESULT = inst; :}
                      | write_instr:inst {: RESULT = inst; :}
                      | read_instr:inst  {: RESULT = inst; :}
                      | cond_instr:inst  {: RESULT = inst; :}
                      | while_instr:inst {: RESULT = inst; :}
                      | for_instr:inst   {: RESULT = inst; :};

assign            ::= access:dest EQUAL:e expr:src SEMICOLON {: RESULT = new Affectation(dest, src, "", eleft, eright); :};

write_instr       ::= WRITE expr:e SEMICOLON {: RESULT = new Write(e, "", eleft, eright); :}
                      | WRITE STRINGCONST:str SEMICOLON  {: new Write(new Chain(str, "", strleft, strright), "", strleft, strright); :};

read_instr        ::= READ IDENT:i SEMICOLON   {: RESULT = new Read(new Idf(i, "", ileft, iright), "", ileft, iright); :};

cond_instr        ::= IF expr:condition THEN body:then ELSE body:els ENDIF {: RESULT = new Condition(condition, then, els, "", conditionleft, conditionright); :}
                      | IF expr:condition THEN body:then ENDIF {: RESULT = new Condition(condition, then, "", conditionleft, conditionright); :};

while_instr       ::= WHILE expr:condition DO body:instruction ENDWHILE {: RESULT = new While(condition, instruction, "", conditionleft, conditionright); :};

for_instr         ::= FOR IDENT:id FROM expr:from TO expr:to DO body:i ENDFOR {: RESULT = new For(new Idf(id,"",idleft,idright), from, to, i, "", ileft, iright); :};



