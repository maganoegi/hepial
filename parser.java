
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\004\003\000\002\007\002\000\002\007\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\012\010\000\002\013" +
    "\005\000\002\013\004\000\002\013\005\000\002\013\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\014\003\000\002" +
    "\005\003\000\002\006\002\000\002\006\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\006\000" +
    "\002\021\005\000\002\021\005\000\002\022\005\000\002" +
    "\020\011\000\002\020\007\000\002\017\007\000\002\016" +
    "\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\004\005\001\002\000\004\002\144\001" +
    "\002\000\004\060\143\001\002\000\012\005\ufffd\007\ufffd" +
    "\062\ufffd\063\ufffd\001\002\000\012\005\ufffe\007\124\062" +
    "\121\063\130\001\002\000\004\005\011\001\002\000\020" +
    "\006\uffda\022\uffda\023\uffda\025\uffda\031\uffda\034\uffda\060" +
    "\uffda\001\002\000\004\006\120\001\002\000\030\006\uffdb" +
    "\022\014\023\025\025\024\027\uffdb\030\uffdb\031\015\033" +
    "\uffdb\034\017\037\uffdb\060\016\001\002\000\004\060\116" +
    "\001\002\000\022\013\041\040\035\041\042\043\032\056" +
    "\043\057\045\060\016\064\036\001\002\000\044\010\uffdc" +
    "\014\uffdc\016\uffdc\026\uffdc\032\uffdc\036\uffdc\042\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\001\002\000\004\060\102\001" +
    "\002\000\030\006\uffd5\022\uffd5\023\uffd5\025\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\033\uffd5\034\uffd5\037\uffd5\060\uffd5\001" +
    "\002\000\030\006\uffd6\022\uffd6\023\uffd6\025\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\033\uffd6\034\uffd6\037\uffd6\060\uffd6\001" +
    "\002\000\004\016\077\001\002\000\030\006\uffd4\022\uffd4" +
    "\023\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\037\uffd4\060\uffd4\001\002\000\022\013\041\040\035" +
    "\041\042\043\032\056\043\057\045\060\016\064\036\001" +
    "\002\000\024\013\041\040\035\041\042\043\032\056\043" +
    "\057\045\060\016\061\033\064\036\001\002\000\030\006" +
    "\uffd9\022\uffd9\023\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\037\uffd9\060\uffd9\001\002\000\030\006" +
    "\uffd3\022\uffd3\023\uffd3\025\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\033\uffd3\034\uffd3\037\uffd3\060\uffd3\001\002\000\030\006" +
    "\uffd8\022\uffd8\023\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\033\uffd8\034\uffd8\037\uffd8\060\uffd8\001\002\000\030\006" +
    "\uffd7\022\uffd7\023\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\033\uffd7\034\uffd7\037\uffd7\060\uffd7\001\002\000\022\013" +
    "\uffe1\040\uffe1\041\uffe1\043\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\064\uffe1\001\002\000\004\010\067\001\002\000\042\010" +
    "\uffe0\014\uffe0\026\uffe0\032\uffe0\036\uffe0\042\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\001\002\000\042\010\uffde\014\uffde" +
    "\026\uffde\032\uffde\036\uffde\042\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\001\002\000\042\010\uffdf\014\uffdf\026\uffdf\032" +
    "\uffdf\036\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\001" +
    "\002\000\022\013\041\040\035\041\042\043\032\056\043" +
    "\057\045\060\016\064\036\001\002\000\042\010\uffef\014" +
    "\uffef\026\uffef\032\uffef\036\uffef\042\uffef\044\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\001\002\000\022\013\041\040\035\041\042" +
    "\043\032\056\043\057\045\060\016\064\036\001\002\000" +
    "\042\010\uffdd\014\uffdd\026\uffdd\032\uffdd\036\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\001\002\000\022\013\uffe3" +
    "\040\uffe3\041\uffe3\043\uffe3\056\uffe3\057\uffe3\060\uffe3\064" +
    "\uffe3\001\002\000\032\010\056\042\052\044\057\045\050" +
    "\046\060\047\055\050\054\051\047\052\062\053\051\054" +
    "\046\055\061\001\002\000\022\013\uffe2\040\uffe2\041\uffe2" +
    "\043\uffe2\056\uffe2\057\uffe2\060\uffe2\064\uffe2\001\002\000" +
    "\022\013\uffe5\040\uffe5\041\uffe5\043\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\064\uffe5\001\002\000\022\013\uffe7\040\uffe7\041" +
    "\uffe7\043\uffe7\056\uffe7\057\uffe7\060\uffe7\064\uffe7\001\002" +
    "\000\022\013\uffec\040\uffec\041\uffec\043\uffec\056\uffec\057" +
    "\uffec\060\uffec\064\uffec\001\002\000\022\013\uffe6\040\uffe6" +
    "\041\uffe6\043\uffe6\056\uffe6\057\uffe6\060\uffe6\064\uffe6\001" +
    "\002\000\022\013\uffee\040\uffee\041\uffee\043\uffee\056\uffee" +
    "\057\uffee\060\uffee\064\uffee\001\002\000\022\013\041\040" +
    "\035\041\042\043\032\056\043\057\045\060\016\064\036" +
    "\001\002\000\022\013\uffe9\040\uffe9\041\uffe9\043\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\064\uffe9\001\002\000\022\013\uffea" +
    "\040\uffea\041\uffea\043\uffea\056\uffea\057\uffea\060\uffea\064" +
    "\uffea\001\002\000\030\006\uffd1\022\uffd1\023\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\037\uffd1\060" +
    "\uffd1\001\002\000\022\013\uffed\040\uffed\041\uffed\043\uffed" +
    "\056\uffed\057\uffed\060\uffed\064\uffed\001\002\000\022\013" +
    "\uffeb\040\uffeb\041\uffeb\043\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\064\uffeb\001\002\000\022\013\uffe4\040\uffe4\041\uffe4\043" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4\001\002\000\022" +
    "\013\uffe8\040\uffe8\041\uffe8\043\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\064\uffe8\001\002\000\042\010\ufff2\014\ufff2\026\ufff2" +
    "\032\ufff2\036\ufff2\042\052\044\057\045\050\046\060\047" +
    "\055\050\054\051\047\052\062\053\051\054\046\055\061" +
    "\001\002\000\032\014\065\042\052\044\057\045\050\046" +
    "\060\047\055\050\054\051\047\052\062\053\051\054\046" +
    "\055\061\001\002\000\042\010\ufff0\014\ufff0\026\ufff0\032" +
    "\ufff0\036\ufff0\042\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\001" +
    "\002\000\042\010\ufff1\014\ufff1\026\ufff1\032\ufff1\036\ufff1" +
    "\042\052\044\057\045\050\046\060\047\055\050\054\051" +
    "\047\052\062\053\051\054\046\055\061\001\002\000\030" +
    "\006\uffd0\022\uffd0\023\uffd0\025\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\033\uffd0\034\uffd0\037\uffd0\060\uffd0\001\002\000\032" +
    "\026\071\042\052\044\057\045\050\046\060\047\055\050" +
    "\054\051\047\052\062\053\051\054\046\055\061\001\002" +
    "\000\022\022\uffda\023\uffda\025\uffda\027\uffda\030\uffda\031" +
    "\uffda\034\uffda\060\uffda\001\002\000\006\027\073\030\074" +
    "\001\002\000\020\022\uffda\023\uffda\025\uffda\030\uffda\031" +
    "\uffda\034\uffda\060\uffda\001\002\000\030\006\uffcd\022\uffcd" +
    "\023\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\037\uffcd\060\uffcd\001\002\000\004\030\076\001\002" +
    "\000\030\006\uffce\022\uffce\023\uffce\025\uffce\027\uffce\030" +
    "\uffce\031\uffce\033\uffce\034\uffce\037\uffce\060\uffce\001\002" +
    "\000\022\013\041\040\035\041\042\043\032\056\043\057" +
    "\045\060\016\064\036\001\002\000\032\010\101\042\052" +
    "\044\057\045\050\046\060\047\055\050\054\051\047\052" +
    "\062\053\051\054\046\055\061\001\002\000\030\006\uffd2" +
    "\022\uffd2\023\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\037\uffd2\060\uffd2\001\002\000\004\035\103" +
    "\001\002\000\022\013\041\040\035\041\042\043\032\056" +
    "\043\057\045\060\016\064\036\001\002\000\032\036\105" +
    "\042\052\044\057\045\050\046\060\047\055\050\054\051" +
    "\047\052\062\053\051\054\046\055\061\001\002\000\022" +
    "\013\041\040\035\041\042\043\032\056\043\057\045\060" +
    "\016\064\036\001\002\000\032\032\107\042\052\044\057" +
    "\045\050\046\060\047\055\050\054\051\047\052\062\053" +
    "\051\054\046\055\061\001\002\000\020\022\uffda\023\uffda" +
    "\025\uffda\031\uffda\034\uffda\037\uffda\060\uffda\001\002\000" +
    "\004\037\111\001\002\000\030\006\uffcb\022\uffcb\023\uffcb" +
    "\025\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\037" +
    "\uffcb\060\uffcb\001\002\000\032\032\113\042\052\044\057" +
    "\045\050\046\060\047\055\050\054\051\047\052\062\053" +
    "\051\054\046\055\061\001\002\000\020\022\uffda\023\uffda" +
    "\025\uffda\031\uffda\033\uffda\034\uffda\060\uffda\001\002\000" +
    "\004\033\115\001\002\000\030\006\uffcc\022\uffcc\023\uffcc" +
    "\025\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\037" +
    "\uffcc\060\uffcc\001\002\000\004\010\117\001\002\000\030" +
    "\006\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\033\uffcf\034\uffcf\037\uffcf\060\uffcf\001\002\000\004" +
    "\002\001\001\002\000\004\060\ufff5\001\002\000\012\005" +
    "\ufffa\007\ufffa\062\ufffa\063\ufffa\001\002\000\012\005\ufffc" +
    "\007\ufffc\062\ufffc\063\ufffc\001\002\000\006\062\121\063" +
    "\130\001\002\000\012\005\ufffb\007\ufffb\062\ufffb\063\ufffb" +
    "\001\002\000\004\060\131\001\002\000\004\060\ufff6\001" +
    "\002\000\004\060\ufff4\001\002\000\006\010\ufff8\015\ufff8" +
    "\001\002\000\006\010\134\015\133\001\002\000\004\060" +
    "\135\001\002\000\012\005\ufff9\007\ufff9\062\ufff9\063\ufff9" +
    "\001\002\000\006\010\ufff7\015\ufff7\001\002\000\004\060" +
    "\137\001\002\000\004\016\140\001\002\000\022\013\041" +
    "\040\035\041\042\043\032\056\043\057\045\060\016\064" +
    "\036\001\002\000\032\010\142\042\052\044\057\045\050" +
    "\046\060\047\055\050\054\051\047\052\062\053\051\054" +
    "\046\055\061\001\002\000\012\005\ufff3\007\ufff3\062\ufff3" +
    "\063\ufff3\001\002\000\012\005\uffff\007\uffff\062\uffff\063" +
    "\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\007\007\006\001\001" +
    "\000\014\010\122\011\124\012\121\030\125\031\126\001" +
    "\001\000\002\001\001\000\006\005\011\006\012\001\001" +
    "\000\002\001\001\000\022\014\021\016\026\017\022\020" +
    "\017\021\030\022\020\023\025\024\027\001\001\000\002" +
    "\001\001\000\012\013\111\014\033\015\037\025\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\067\014\033\015\037\025\036\001\001\000\012" +
    "\013\043\014\033\015\037\025\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\065\014\033" +
    "\015\037\025\036\001\001\000\002\001\001\000\012\013" +
    "\063\014\033\015\037\025\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\062\014" +
    "\033\015\037\025\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\052" +
    "\001\001\000\004\026\052\001\001\000\002\001\001\000" +
    "\004\026\052\001\001\000\002\001\001\000\004\026\052" +
    "\001\001\000\006\005\071\006\012\001\001\000\002\001" +
    "\001\000\006\005\074\006\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\077\014" +
    "\033\015\037\025\036\001\001\000\004\026\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\103\014" +
    "\033\015\037\025\036\001\001\000\004\026\052\001\001" +
    "\000\012\013\105\014\033\015\037\025\036\001\001\000" +
    "\004\026\052\001\001\000\006\005\107\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\052\001" +
    "\001\000\006\005\113\006\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\135\031\126\001\001\000\002\001" +
    "\001\000\004\027\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\140\014\033\015\037\025" +
    "\036\001\001\000\004\026\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= header declar_lst STARTPRG body ENDPRG 
            {
              ProgramDeclaration RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ProgramDeclaration p = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int declarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Block declar = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block instructions = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  p.setInstructions(instructions);
                        p.setDeclarations(declar);
                        System.out.println("ok, c'est good !!!!"); 
                        RESULT = p;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramDeclaration start_val = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PRG IDENT 
            {
              ProgramDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramDeclaration(new Idf(id, "", idleft, idright), "", idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declar_lst ::= declars 
            {
              Block RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruction> inst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(inst, "", instleft, instright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_lst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declars ::= 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declars ::= declars declar 
            {
              ArrayList<Instruction> RESULT =null;
		int dcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruction> dcs = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruction> dc = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruction> lst = new ArrayList<>(dcs); lst.addAll(dc); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declar ::= declar_var 
            {
              ArrayList<Instruction> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruction> v = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declar ::= declar_const 
            {
              ArrayList<Instruction> RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstantDeclaration dc = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruction> lst = new ArrayList<>(); lst.add(dc); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declar_var ::= type l_ident SEMICOLON 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Idf> ids = (ArrayList<Idf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        ArrayList<Instruction> lst = new ArrayList<>();
                        for(Idf id : ids) {
                          lst.add(new VariableDeclaration(t, id, "", idsleft, idsright));
                          TDS.put(id.getNom(), t);
                        }
                        RESULT = lst;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_ident ::= IDENT 
            {
              ArrayList<Idf> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Idf> lst = new ArrayList<>(); lst.add(new Idf(id, "", idleft, idright)); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ident",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_ident ::= l_ident COMMA IDENT 
            {
              ArrayList<Idf> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Idf> ids = (ArrayList<Idf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                          ArrayList<Idf> lst = new ArrayList<>(ids); lst.add(new Idf(id, "", idleft, idright)); RESULT = lst;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ident",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= typebase 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // typebase ::= TINTEGER 
            {
              Type RESULT =null;
		 RESULT = new Int(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typebase",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // typebase ::= TBOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new Bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typebase",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declar_const ::= CONSTANT type IDENT EQUAL expr SEMICOLON 
            {
              ConstantDeclaration RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new ConstantDeclaration(t, new Idf(id, "", idleft, idright), e, "", tleft, tright);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr op_bin expr 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binary op = (Binary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       // build binary expression
                         op.lierGauche(left);
                         op.lierDroit(right);
                         RESULT = op;  
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= op_una expr 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Unary op = (Unary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 op.lier(expr); RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= OPENPARENT expr CLOSEPARENT 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Parentheses(e, "", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= operand 
            {
              Expression RESULT =null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression operand = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = operand;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_bin ::= PLUS 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Addition("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_bin ::= TIMES 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Product("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_bin ::= DIVIDE 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_bin ::= EQUALS 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_bin ::= DIFF 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Difference("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_bin ::= INF 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Inferior("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_bin ::= SUP 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Superior("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_bin ::= INFEQUAL 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InferiorEqual("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_bin ::= SUPEQUAL 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SuperiorEqual("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_bin ::= AND 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_bin ::= OR 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_una ::= TILDA 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tilda("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_una ::= NOT 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not("", oleft, oright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_una ::= MINUS 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus("", oleft, oright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operand ::= access 
            {
              Expression RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression access = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = access; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operand ::= INTEGERCONST 
            {
              Expression RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int ib = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Number(ib, "", ibleft, ibright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operand ::= TRUE 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operand ::= FALSE 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // access ::= IDENT 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Idf(id, "", idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // body ::= instr_lst 
            {
              Block RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruction> instructions = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(instructions, "", instructionsleft, instructionsright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instr_lst ::= 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr_lst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr_lst ::= instr_lst instr 
            {
              ArrayList<Instruction> RESULT =null;
		int instructionListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruction> instructionList = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<Instruction> instructions = new ArrayList<Instruction>(instructionList);
                        instructions.add(instruction);
                        RESULT = instructions;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr_lst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr ::= assign 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Affectation inst = (Affectation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr ::= write_instr 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Write inst = (Write)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= read_instr 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Read inst = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instr ::= cond_instr 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition inst = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instr ::= while_instr 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instr ::= for_instr 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign ::= access EQUAL expr SEMICOLON 
            {
              Affectation RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression dest = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression src = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Affectation(dest, src, "", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write_instr ::= WRITE expr SEMICOLON 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Write(e, "", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_instr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write_instr ::= WRITE STRINGCONST SEMICOLON 
            {
              Write RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Write(new Chain(str, "", strleft, strright), "", strleft, strright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_instr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // read_instr ::= READ IDENT SEMICOLON 
            {
              Read RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Read(new Idf(i, "", ileft, iright), "", ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_instr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond_instr ::= IF expr THEN body ELSE body ENDIF 
            {
              Condition RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Block then = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block els = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Condition(condition, then, els, "", conditionleft, conditionright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_instr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond_instr ::= IF expr THEN body ENDIF 
            {
              Condition RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block then = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Condition(condition, then, "", conditionleft, conditionright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_instr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while_instr ::= WHILE expr DO body ENDWHILE 
            {
              While RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block instruction = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(condition, instruction, "", conditionleft, conditionright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_instr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for_instr ::= FOR IDENT FROM expr TO expr DO body ENDFOR 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression from = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression to = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block i = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(new Idf(id,"",idleft,idright), from, to, i, "", ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
